
syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.decryptiondevice";
option java_outer_classname = "DecryptionDeviceProto";

package decryptiondevice;

service DecryptionDevice {

    // Decryption Request RPC
    //
    // Request contains ciphertext and proof
    // Returns the plaintext record
    rpc DecryptRecord(DecryptionRequest) returns (Record) {}


    // Get Signed Root Tree Hash RPC
    //
    // Caller provides a nonce
    // Returns a signed RTH and nonce
    rpc GetRootTreeHash(RootTreeHashRequest) returns (RootTreeHash) {}


    // Get Public key RPC
    //
    // Returns a Remote attestation report containing the public key as user data
    rpc GetPublicKey(PublicKeyRequest) returns (Quote) {}
}


// Decryption Request
// - Byte array containing ciphertext
// - Proofs represented as JSON trees
message DecryptionRequest {
    bytes ciphertext        = 1;
    string proofOfPresence  = 2;
    string proofOfExtension = 3;
}
// A plaintext record
message Record {
    bytes plaintext = 1;
}



// RTH request contains
// - A random nonce 
message RootTreeHashRequest {
    bytes nonce = 1;
}
// Root Tree Hash
// Random nonce used as message ID
// Signature over rth and nonce
message RootTreeHash {
    bytes rth   = 1;
    bytes nonce = 2;
    bytes sig   = 3;
}



// Public key request message
message PublicKeyRequest {
    bytes nonce = 1;
}
// Attestation Quote, containing the public key
message Quote {
    string quote = 1; //some format.. to be defined later
    //PEM formatted key 
    bytes RSA_EncryptionKey = 2;
    bytes RSA_VerificationKey = 3;
}



